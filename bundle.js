(()=>{"use strict";class t{static create(){return new Float32Array(16)}static identity(e){let r=e;return null==r&&(r=t.create()),r[0]=1,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=1,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=1,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}static copy(e,r){let a=r;if(null==e)throw new Error("Mat4.copy: invalid argument");return null==a&&(a=t.create()),a[0]=e[0],a[1]=e[1],a[2]=e[2],a[3]=e[3],a[4]=e[4],a[5]=e[5],a[6]=e[6],a[7]=e[7],a[8]=e[8],a[9]=e[9],a[10]=e[10],a[11]=e[11],a[12]=e[12],a[13]=e[13],a[14]=e[14],a[15]=e[15],a}static multiply(e,r,a){let i=a;null==i&&(i=t.create());let n=e[0],l=e[1],o=e[2],s=e[3],c=e[4],h=e[5],g=e[6],u=e[7],_=e[8],d=e[9],M=e[10],m=e[11],A=e[12],f=e[13],p=e[14],v=e[15],E=r[0],F=r[1],b=r[2],y=r[3],I=r[4],R=r[5],P=r[6],w=r[7],T=r[8],S=r[9],B=r[10],x=r[11],L=r[12],U=r[13],C=r[14],V=r[15];return i[0]=E*n+F*c+b*_+y*A,i[1]=E*l+F*h+b*d+y*f,i[2]=E*o+F*g+b*M+y*p,i[3]=E*s+F*u+b*m+y*v,i[4]=I*n+R*c+P*_+w*A,i[5]=I*l+R*h+P*d+w*f,i[6]=I*o+R*g+P*M+w*p,i[7]=I*s+R*u+P*m+w*v,i[8]=T*n+S*c+B*_+x*A,i[9]=T*l+S*h+B*d+x*f,i[10]=T*o+S*g+B*M+x*p,i[11]=T*s+S*u+B*m+x*v,i[12]=L*n+U*c+C*_+V*A,i[13]=L*l+U*h+C*d+V*f,i[14]=L*o+U*g+C*M+V*p,i[15]=L*s+U*u+C*m+V*v,i}static scale(e,r,a){let i=a;return null==i&&(i=t.create()),i[0]=e[0]*r[0],i[1]=e[1]*r[0],i[2]=e[2]*r[0],i[3]=e[3]*r[0],i[4]=e[4]*r[1],i[5]=e[5]*r[1],i[6]=e[6]*r[1],i[7]=e[7]*r[1],i[8]=e[8]*r[2],i[9]=e[9]*r[2],i[10]=e[10]*r[2],i[11]=e[11]*r[2],i[12]=e[12],i[13]=e[13],i[14]=e[14],i[15]=e[15],i}static translate(e,r,a){let i=a;return null==i&&(i=t.create()),i[0]=e[0],i[1]=e[1],i[2]=e[2],i[3]=e[3],i[4]=e[4],i[5]=e[5],i[6]=e[6],i[7]=e[7],i[8]=e[8],i[9]=e[9],i[10]=e[10],i[11]=e[11],i[12]=e[0]*r[0]+e[4]*r[1]+e[8]*r[2]+e[12],i[13]=e[1]*r[0]+e[5]*r[1]+e[9]*r[2]+e[13],i[14]=e[2]*r[0]+e[6]*r[1]+e[10]*r[2]+e[14],i[15]=e[3]*r[0]+e[7]*r[1]+e[11]*r[2]+e[15],i}static rotate(e,r,a,i){let n=i;null==n&&(n=t.create());let l=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);if(!l)return null;let o=a[0],s=a[1],c=a[2];1!=l&&(l=1/l,o*=l,s*=l,c*=l);let h=Math.sin(r),g=Math.cos(r),u=1-g,_=e[0],d=e[1],M=e[2],m=e[3],A=e[4],f=e[5],p=e[6],v=e[7],E=e[8],F=e[9],b=e[10],y=e[11],I=o*o*u+g,R=s*o*u+c*h,P=c*o*u-s*h,w=o*s*u-c*h,T=s*s*u+g,S=c*s*u+o*h,B=o*c*u+s*h,x=s*c*u-o*h,L=c*c*u+g;return r?e!=n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]):n=e,n[0]=_*I+A*R+E*P,n[1]=d*I+f*R+F*P,n[2]=M*I+p*R+b*P,n[3]=m*I+v*R+y*P,n[4]=_*w+A*T+E*S,n[5]=d*w+f*T+F*S,n[6]=M*w+p*T+b*S,n[7]=m*w+v*T+y*S,n[8]=_*B+A*x+E*L,n[9]=d*B+f*x+F*L,n[10]=M*B+p*x+b*L,n[11]=m*B+v*x+y*L,n}static lookAt(e,r,a,i){let n=e[0],l=e[1],o=e[2],s=r[0],c=r[1],h=r[2],g=a[0],u=a[1],_=a[2];if(n==s&&l==c&&o==h)return t.identity(i);let d,M,m,A,f,p,v,E,F,b,y=i;return null==y&&(y=t.create()),v=n-r[0],E=l-r[1],F=o-r[2],b=1/Math.sqrt(v*v+E*E+F*F),v*=b,E*=b,F*=b,d=u*F-_*E,M=_*v-g*F,m=g*E-u*v,b=Math.sqrt(d*d+M*M+m*m),b?(b=1/b,d*=b,M*=b,m*=b):(d=0,M=0,m=0),A=E*m-F*M,f=F*d-v*m,p=v*M-E*d,b=Math.sqrt(A*A+f*f+p*p),b?(b=1/b,A*=b,f*=b,p*=b):(A=0,f=0,p=0),y[0]=d,y[1]=A,y[2]=v,y[3]=0,y[4]=M,y[5]=f,y[6]=E,y[7]=0,y[8]=m,y[9]=p,y[10]=F,y[11]=0,y[12]=-(d*n+M*l+m*o),y[13]=-(A*n+f*l+p*o),y[14]=-(v*n+E*l+F*o),y[15]=1,y}static perspective(e,r,a,i,n){let l=n;null==l&&(l=t.create());let o=a*Math.tan(e*Math.PI/360),s=o*r*2,c=2*o,h=i-a;return l[0]=2*a/s,l[1]=0,l[2]=0,l[3]=0,l[4]=0,l[5]=2*a/c,l[6]=0,l[7]=0,l[8]=0,l[9]=0,l[10]=-(i+a)/h,l[11]=-1,l[12]=0,l[13]=0,l[14]=-i*a*2/h,l[15]=0,l}static ortho(e,r,a,i,n,l,o){let s=o;null==s&&(s=t.create());let c=r-e,h=a-i,g=l-n;return s[0]=2/c,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=2/h,s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[10]=-2/g,s[11]=0,s[12]=-(e+r)/c,s[13]=-(a+i)/h,s[14]=-(l+n)/g,s[15]=1,s}static transpose(e,r){let a=r;return null==a&&(a=t.create()),a[0]=e[0],a[1]=e[4],a[2]=e[8],a[3]=e[12],a[4]=e[1],a[5]=e[5],a[6]=e[9],a[7]=e[13],a[8]=e[2],a[9]=e[6],a[10]=e[10],a[11]=e[14],a[12]=e[3],a[13]=e[7],a[14]=e[11],a[15]=e[15],a}static inverse(e,r){let a=r;null==a&&(a=t.create());let i=e[0],n=e[1],l=e[2],o=e[3],s=e[4],c=e[5],h=e[6],g=e[7],u=e[8],_=e[9],d=e[10],M=e[11],m=e[12],A=e[13],f=e[14],p=e[15],v=i*c-n*s,E=i*h-l*s,F=i*g-o*s,b=n*h-l*c,y=n*g-o*c,I=l*g-o*h,R=u*A-_*m,P=u*f-d*m,w=u*p-M*m,T=_*f-d*A,S=_*p-M*A,B=d*p-M*f,x=1/(v*B-E*S+F*T+b*w-y*P+I*R);return a[0]=(c*B-h*S+g*T)*x,a[1]=(-n*B+l*S-o*T)*x,a[2]=(A*I-f*y+p*b)*x,a[3]=(-_*I+d*y-M*b)*x,a[4]=(-s*B+h*w-g*P)*x,a[5]=(i*B-l*w+o*P)*x,a[6]=(-m*I+f*F-p*E)*x,a[7]=(u*I-d*F+M*E)*x,a[8]=(s*S-c*w+g*R)*x,a[9]=(-i*S+n*w-o*R)*x,a[10]=(m*y-A*F+p*v)*x,a[11]=(-u*y+_*F-M*v)*x,a[12]=(-s*T+c*P-h*R)*x,a[13]=(i*T-n*P+l*R)*x,a[14]=(-m*b+A*E-f*v)*x,a[15]=(u*b-_*E+d*v)*x,a}static toVecIV(t,e){let r=t[0],a=t[1],i=t[2],n=t[3],l=t[4],o=t[5],s=t[6],c=t[7],h=t[8],g=t[9],u=t[10],_=t[11],d=t[12],M=t[13],m=t[14],A=t[15],f=e[0],p=e[1],v=e[2],E=e[3],F=[];return F[0]=f*r+p*l+v*h+E*d,F[1]=f*a+p*o+v*g+E*M,F[2]=f*i+p*s+v*u+E*m,F[3]=f*n+p*c+v*_+E*A,e=F,F}static vpFromCameraProperty(e,r,a,i,n,l,o,s,c,h){return t.lookAt(e,r,a,s),t.perspective(i,n,l,o,c),t.multiply(c,s,h),{view:s,projection:c,viewProjection:h}}static screenPositionFromMvp(e,r,a,i){let n=.5*a,l=.5*i,o=t.toVecIV(e,[r[0],r[1],r[2],1]);return o[3]<=0?[NaN,NaN]:(o[0]/=o[3],o[1]/=o[3],o[2]/=o[3],[n+o[0]*n,l-o[1]*l])}static compose(e,r,a,i){let n=i;null==n&&(n=t.create());let l=r[0],o=r[1],s=r[2],c=r[3],h=l+l,g=o+o,u=s+s,_=l*h,d=l*g,M=l*u,m=o*g,A=o*u,f=s*u,p=c*h,v=c*g,E=c*u,F=a[0],b=a[1],y=a[2];return n[0]=(1-(m+f))*F,n[1]=(d+E)*F,n[2]=(M-v)*F,n[3]=0,n[4]=(d-E)*b,n[5]=(1-(_+f))*b,n[6]=(A+p)*b,n[7]=0,n[8]=(M+v)*y,n[9]=(A-p)*y,n[10]=(1-(_+m))*y,n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n}}const e=document.querySelector("#canvas");e.width=1280,e.height=720;let r=25,a=.25*Math.PI,i=.25*Math.PI;const n={x:0,y:0},l=()=>new Float32Array([r*Math.sin(a)*Math.cos(i),r*Math.sin(i),r*Math.cos(a)*Math.cos(i)]);let o=l();e.addEventListener("wheel",(t=>{t.preventDefault(),r+=.01*t.deltaY,r=Math.max(2,r),o=l()})),e.addEventListener("pointerdown",(t=>{n.x=t.clientX,n.y=t.clientY,e.onpointermove=t=>{const e=t.clientX-n.x,r=t.clientY-n.y;n.x=t.clientX,n.y=t.clientY,a+=Math.PI/180*e,i+=Math.PI/180*r,a<-Math.PI&&(a+=2*Math.PI),a>Math.PI&&(a-=2*Math.PI),i<-Math.PI/2&&(i=-Math.PI/2),i>Math.PI/2&&(i=Math.PI/2),o=l()},window.onpointerup=()=>{e.onpointermove=null,window.onpointerup=null}}));const s=new class{constructor(t){this.canvas=t,this._gl=t.getContext("webgl"),this._gl.enable(this._gl.DEPTH_TEST),this._gl.depthFunc(this._gl.LEQUAL),this._gl.clearColor(0,0,0,1),this._gl.clearDepth(1),this._gl.clear(this._gl.COLOR_BUFFER_BIT|this._gl.DEPTH_BUFFER_BIT)}createProgram(t,e){const r=this._gl.createProgram();if(this._gl.attachShader(r,t),this._gl.attachShader(r,e),this._gl.linkProgram(r),!this._gl.getProgramParameter(r,this._gl.LINK_STATUS))throw new Error(this._gl.getProgramInfoLog(r));return this._gl.useProgram(r),r}createShader(t,e){const r="vertex"===t?this._gl.VERTEX_SHADER:this._gl.FRAGMENT_SHADER,a=this._gl.createShader(r);if(this._gl.shaderSource(a,e),this._gl.compileShader(a),!this._gl.getShaderParameter(a,this._gl.COMPILE_STATUS))throw new Error(this._gl.getShaderInfoLog(a));return a}createVbo(t){const e=this._gl.createBuffer();return this._gl.bindBuffer(this._gl.ARRAY_BUFFER,e),this._gl.bufferData(this._gl.ARRAY_BUFFER,new Float32Array(t),this._gl.STATIC_DRAW),this._gl.bindBuffer(this._gl.ARRAY_BUFFER,null),e}createIbo(t){const e=this._gl.createBuffer();return this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER,e),this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER,new Int16Array(t),this._gl.STATIC_DRAW),this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER,null),e}getIdentity(){return t.identity(t.create())}getViewMatrix(e,r,a){const i=t.identity(t.create());return t.lookAt(e,r,a,i),i}getProductionMatrix(e,r,a){const i=t.identity(t.create());return t.perspective(e,this.canvas.width/this.canvas.height,r,a,i),i}multiply(e,r){const a=t.create();return t.multiply(e,r,a),a}getMvpMatrix(e,r,a,i,n,l){const o=t.identity(t.create()),s=t.identity(t.create()),c=t.identity(t.create()),h=t.identity(t.create());return t.lookAt(e,r,a,s),t.perspective(i,this.canvas.width/this.canvas.height,n,l,c),t.multiply(c,s,h),t.multiply(h,o,h),h}bindVbo(t){this._gl.bindBuffer(this._gl.ARRAY_BUFFER,t)}bindIbo(t){this._gl.bindBuffer(this._gl.ELEMENT_ARRAY_BUFFER,t)}setAttribute(t,e,r){const a=this._gl.getAttribLocation(t,e);this._gl.enableVertexAttribArray(a),this._gl.vertexAttribPointer(a,r,this._gl.FLOAT,!1,0,0)}setUniform(t,e,r,a=!1){const i=this._gl.getUniformLocation(t,r);this._gl.uniformMatrix4fv(i,a,e)}get gl(){return this._gl}}(e),c=s.gl,h=s.createShader("vertex","#define GLSLIFY 1\nattribute vec3 position;\nuniform mat4 mvpMatrix;\nattribute vec4 vertexColor;\nvarying lowp vec4 fragmentColor;\n\nvoid main(void) {\n  gl_Position = mvpMatrix * vec4(position, 1.0);\n  fragmentColor = vertexColor;\n}"),g=s.createShader("fragment","#define GLSLIFY 1\nvarying lowp vec4 fragmentColor;\nvoid main(void){\n  gl_FragColor = fragmentColor;\n}"),u=s.createProgram(h,g),_=(t,e,r,a)=>{const i=[],[n,l,o]=function(t,e,r){const a=r/100,i=e/100,n=[a*(1-i),a*(1-i),a*(1-i)],l=t/60,o=Math.floor(l),s=a*i*(1-Math.abs(l%2-1));switch(o){case 0:n[0]+=a*i,n[1]+=s;break;case 1:n[0]+=s,n[1]+=a*i;break;case 2:n[1]+=a*i,n[2]+=s;break;case 3:n[1]+=s,n[2]+=a*i;break;case 4:n[0]+=s,n[2]+=a*i;break;case 5:n[0]+=a*i,n[2]+=s}return n[0]=Math.round(255*n[0]),n[1]=Math.round(255*n[1]),n[2]=Math.round(255*n[2]),n}(t,e,r);for(let t=0;t<9;t++)i.push(n/255,l/255,o/255,a);return i},d=[0,1,2,2,3,0,3,2,6,6,7,3,7,6,5,5,4,7,4,5,1,1,0,4,4,0,3,3,7,4,1,5,6,6,2,1],M=[[0,1,6,10,12,13,12,10,6,0],[0,2,6,14,12,10,8,6,4,0],[0,6,14,12,10,8,6,4,2,0],[0,4,10,12,10,8,6,4,2,0],[0,2,6,8,10,10,10,8,4,0],[0,4,8,10,10,10,10,8,6,1],[0,4,6,8,10,10,10,8,6,1],[0,4,6,10,12,14,14,12,10,1],[0,4,6,8,10,12,12,12,10,1],[0,4,8,12,14,14,12,12,8,1]].map(((t,e)=>{const r=e/t.length*Math.PI*2,a=Math.cos(r),i=Math.sin(r);return t.map(((t,e)=>new Array(t+1).fill(0).map(((t,r)=>[a*(r+1),10-2*e,i*(r+1)]))))})),m=()=>{const e=s.createIbo(d);s.bindIbo(e);const r=s.getViewMatrix(new Float32Array(o),new Float32Array([0,0,0]),new Float32Array([0,1,0])),a=s.getProductionMatrix(90,.1,100),i=s.multiply(a,r);c.clear(c.DEPTH_BUFFER_BIT|c.COLOR_BUFFER_BIT);for(let e=0;e<14;e++){const r=s.createVbo([-1,-1,n=e/14,1,-1,l=(e+1)/14,1,1,l,-1,1,n,-1,-1,-n,1,-1,-l,1,1,-l,-1,1,-n]);s.bindVbo(r),s.setAttribute(u,"position",3);for(let r=0;r<10;r++)for(let a=0;a<10;a++){if(!M[a][r][e])continue;const n=360*a/10,l=e/14*100,o=(Math.max(1.5,M[a][r][e][1]/2+5)-1)/10*100,h=s.createVbo(_(n,l,o,1));s.bindVbo(h),s.setAttribute(u,"vertexColor",4);const g=a/10*Math.PI*2,m=s.getIdentity();t.translate(m,new Float32Array(M[a][r][e]),m),t.rotate(m,-g,new Float32Array([0,1,0]),m);const A=s.multiply(i,m);s.setUniform(u,A,"mvpMatrix"),c.drawElements(c.TRIANGLE_STRIP,d.length,c.UNSIGNED_SHORT,0)}}var n,l;c.flush(),requestAnimationFrame(m)};requestAnimationFrame(m)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,